### 웹서비스 기획에 대한 가벼운 이해

### MVP (Minimum Viable Product)
- 최소한의 기능을 구현한 제품
- 피드백을 받아서, 기능을 점차적으로 개선
- 최근 스타트업이 개발하는 방식


#내가 만들 blog의 MVP
### 기본 목표 프로그램
- 블로그 사이트를 구현 예정
  - 블로그 페이지를 웹으로 오픈
  - ABTest 로 고객에게 다른 페이지를 보여주는 기능(동일한 라우팅 경로이지만 각 사용자들에게 서로 다른 화면이 보여지게 하는 것)
  - 각 페이지마다 고객 이메일 구독 유도 기능
  - 이메일 구독시, 이메일 저장 기능
  - 이메일 구독시, 고객에게 이메일 구독중임을 알려주는 기능
  - 각 페이지에 얼마나 많은 사람들이 접근했는지 접근 시간 저장 기능

### 웹서비스 구현을 위해 알아둬야 하는 MVC 패턴 - 아키텍쳐의 일종
  - Model: 응용 프로그램의 데이터를 나타냄 (주로 데이터베이스)
  - View: 텍스트, 버튼등 사용자 인터페이스를 나타냄 (웹페이지)
  - Controller: Model 과 View 를 제어하는 중간 역할 (중간 제어 코드)
- MVC 패턴대로 코드를 작성하면, 유지보수가 쉬워진다는 주장을 한 것임 - 실제로는 그렇지 않을 수도 있음



### 구현할 기능
- flask로 프론트엔드와 백엔드를 모두 구현
- 블로그 페이지 제목만 변경하여 두 가지 버전 구현
- 동일한 라우팅 경로 접속시마다 두 가지 버전 중 하나가 보여지도록 함 (A: 50%, B: 50%)
  - 접속 IP 와 접속시간을 로그로 남김
- 구독시 이메일 주소를 받아서 저장함
  - 해당 사용자는 flask 서버가 재실행되지 않는 이상, 동일 블로그 페이지가 보여지고  구독창이 더이상 뜨지 않도록 함
  



### MVC 패턴과 flask blueprint

- 한 파일에 모든 기능 코드를 넣으면, 복잡해지고, 관리가 어려움
- re-usability 를 항상 생각해야 함


  ### flask 백엔드 코드 구조
- 기능별로!! 폴더/파일 구분 (blueprint 를 사용해서, 기능별로 추가/삭제가 쉽도록 구성)
- MVC 에서 View 에 해당하는 부분은 없음 (순수 Rest API 서버로, 추후 해당 API 를 사용한 프론트앤드 별도 구축)
- C 는 API, M 은 데이터베이스/데이터 모델 로만 구성하면 됨


blueprint란?

blueprint를 간단하게 설명하면 우리가 윈도우에서 게임은 게임별로 사진은 사진별로 깔끔하게 폴더를 정리하듯이 
blueprint는 flask에서 제공하는 라이브러리로 페이지나 기능에 맞게 백엔드를 분류해서 사용하기 편하게 해준다. 
 

1. "from flask import Blueprint" 를 해서 blueprint를 가져온다.

2. Blueprint를 사용하여 객체를 만들고 만들어진 객체를 통해 동일한 url로 묶어 준다. 
   가령 책을 읽는 페이지와 쓰는 페이지를 책이라는 url에 묶어서 
   /book/write와 /book/read 를 쓸때 /book 이라는 url로 묶은 것이다. 

3. 묶고 싶은 페이지를 앞서 선언한 객체와 연결한다. 

4. register_blueprint 를 통해 해당 blueprint를 등록한다.

 




출처: https://scribblinganything.tistory.com/178 [코딩끄적끄적]